#!/bin/bash
#
# --------------------------------------------------------------
# Vaminfo (vamifetch) - A simple system fetch tool for VamoraOS
# https://github.com/TheVamoraProject/Vaminfo
# --------------------------------------------------------------
#
# MIT License
#
# Copyright (c) 2025 Vamora
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


LC_ALL=C
LANG=C


# ========== System Info ============================================

# Get OS name

if [ -f /etc/os-release ]; then
  distro=$(grep "^PRETTY_NAME=" /etc/os-release | cut -d= -f2 | tr -d '"')
else
  distro="Unknown OS"
fi

# Get user, Kernel, uptime, shell and window manager

user=$(whoami)
host=$(hostname)
kernel=$(uname -r)
uptime=$(uptime -p 2>/dev/null | sed 's/up //')
shell=${SHELL:-Unknown}
wm=${XDG_CURRENT_DESKTOP:-None}

# ===================================================================

# ========== Hardware Stuffz ========================================

# Get Cpu, Gpu, Ram, Disk usage, Battery and resolution

cpu_model=$(lscpu 2>/dev/null | grep "Model name" | awk -F: '{print $2}' | xargs)
cpu_model=${cpu_model:-N/A}

gpu=$(lspci 2>/dev/null | grep -i 'vga\|3d' | cut -d ":" -f3 | xargs)
gpu=${gpu:-N/A}

ram_total=$(free -h 2>/dev/null | awk '/Mem:/ {print $2}')
ram_total=${ram_total:-N/A}

disk_usage=$(df -h / 2>/dev/null | awk 'NR==2 {print $3 " / " $2 " used"}')
disk_usage=${disk_usage:-N/A}

battery=$(upower -i $(upower -e | grep 'BAT' 2>/dev/null) 2>/dev/null | grep percentage | awk '{print $2}')
battery=${battery:-N/A}

resolution=$(xrandr --current 2>/dev/null | grep '*' | awk '{print $1}' | head -n1)
resolution=${resolution:-N/A}

# ===================================================================

# ========== VamoraApps (vapps) Check ===============================

if [ -d /opt/VamoraApps/ ]; then
  vapps_support="Fully supported"
elif [ -d /VamoraSys/vapps ]; then
  vapps_support="Supported (Please update your Vapp installer)"
elif [ -d "$HOME/.vapps" ]; then
  vapps_support="Supported for some users"
else
  vapps_support="Not supported"
fi

# ===================================================================

# ========== Network Status =========================================

if ping -c 1 -W 2 1.1.1.1 >/dev/null 2>&1; then
  interface=$(ip link show | awk '/state UP/ {print $2}' | sed 's/://' | head -n1)
  if [ -n "$interface" ]; then
    network_status="Connected (interface: $interface)"
  else
    network_status="Connected (unknown interface)"
  fi
else
  network_status="Not connected"
fi

ip=$(curl -s ifconfig.me 2>/dev/null)

# ===================================================================

# ===== Terminal Detection (ts dosnt work weith all terminals) ======

get_terminal() {
    pid=$$
    while [ $pid -ne 0 ]; do
        term=$(ps -o comm= -p $pid 2>/dev/null)
        case "$term" in
            gnome-terminal|gnome-terminal-*|gnome-terminal-server) echo "GNOME Terminal"; return ;;
            konsole) echo "Konsole"; return ;;
            xterm) echo "XTerm"; return ;;
            alacritty) echo "Alacritty"; return ;;
            mate-terminal) echo "MATE Terminal"; return ;;
            tilix) echo "Tilix"; return ;;
            kitty) echo "Kitty"; return ;;
            urxvt|rxvt) echo "URxvt"; return ;;
            st) echo "ST"; return ;;
            lxterminal) echo "LXTerminal"; return ;;
            xfce4-terminal) echo "XFCE Terminal"; return ;;
            tmux|screen) ;; # Skip multiplexers
            *) pid=$(ps -o ppid= -p $pid 2>/dev/null | xargs); [ -z "$pid" ] && break ;;
        esac
    done
    echo "VamoTerminal" # do zis if no terminal found
}
terminal=$(get_terminal)

# ===================================================================

# ========== Shorten CPU & GPU names ================================

max_len=42
[ ${#cpu_model} -gt $max_len ] && cpu_model="${cpu_model:0:$max_len}..."

max_len=30
[ ${#gpu} -gt $max_len ] && gpu="${gpu:0:$max_len}..."

# ===================================================================

# ========== Vamora Release Info ====================================

. /etc/VamoraSys/vamora-release
LOCAL_INFO="/etc/VamoraSys/VaminfoInfo.vmf"
REMOTE_INFO="https://raw.githubusercontent.com/TheVamoraProject/Vaminfo/main/VaminfoInfo.vmf"
INSTALL_PATH="/usr/bin/vaminfo"

# Function: extract version from a file
get_version() {
    grep "VAMINFO_VERSION=" "$1" | cut -d'"' -f2
}

# ===================================================================

# ========== Handle Flags ===============================================

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "Vaminfo - A simple system fetch tool made just for VamoraOS üíô"
    echo
    echo "Usage: vaminfo [options]"
    echo
    echo "Options:"
    echo "  --help, -h      Show this help message"
    echo "  --version, -v   Show version info"
    echo "  --update, -u    Update vaminfo to latest version"
    echo "  --mini, -m    Show a smaller version of vaminfo"
    exit 0

elif [[ "$1" == "-m" || "$1" == "--mini" ]]; then
    cat << "EOF"
__     __
\ \   / /_ _ _ __ ___   ___  _ __ __ _
 \ \ / / _` | '_ ` _ \ / _ \| '__/ _` |
  \ V / (_| | | | | | | (_) | | | (_| |
   \_/ \__,_|_| |_| |_|\___/|_|  \__,_|
----------------------------------------
EOF
    echo "OS:      $distro"
    echo "Kernel:  $kernel"
    echo "CPU:     $cpu_model"
    echo "GPU:     $gpu"
    echo "RAM:     $ram_total"
    echo "Disk:    $disk_usage"
    echo "Network: $network_status"
    exit 0

elif [[ "$1" == "--update" || "$1" == "-u" ]]; then
    echo "üîé Checking for updates from GitHub..."
    LOCAL_VER=$(get_version "$LOCAL_INFO")
    REMOTE_VER=$(curl -s "$REMOTE_INFO" | grep "VAMINFO_VERSION=" | cut -d'"' -f2)

    if [[ -z "$REMOTE_VER" ]]; then
        echo "‚ùå Failed to check latest version."
        exit 1
    fi

    if (( REMOTE_VER > LOCAL_VER )); then
        echo "‚¨áÔ∏è  New version available: $REMOTE_VER"
        echo "Updating vaminfo..."
        git clone https://github.com/TheVamoraProject/Vaminfo.git /tmp/Vaminfo
        cd /tmp/Vaminfo || exit 1
        chmod +x vaminfo
        sudo mv vaminfo "$INSTALL_PATH"
        sudo cp VaminfoInfo.vmf "$LOCAL_INFO"
        echo "‚úÖ Updated to version $REMOTE_VER!"
        rm -rf /tmp/Vaminfo
    elif (( REMOTE_VER < LOCAL_VER )); then
        echo "üíô Ooooh beta tester detected!"
        echo "You are running version $LOCAL_VER while GitHub has $REMOTE_VER."
    else
        echo "‚úÖ You are already on the latest version ($LOCAL_VER)."
    fi
    exit 0

elif [[ "$1" == "--version" || "$1" == "-v" ]]; then
    echo "Vaminfo version: 4.0"
    echo "VamoraOS info : $AL_NAME $VERSION ($VERSION_CODENAME)"
    exit 0
fi

# ======================================================================

# ========== Vamora Logo ASCII =========================================

ascii_art=(
"\e[1;34m     %%%%%%%%%%%%%%%%%%%%%%%%%%%     \e[0m"
"\e[1;34m   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   \e[0m"
"\e[1;34m %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \e[0m"
"\e[1;34m%%%%%%%%....*%%%%%%....%%....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%%%%%.....%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%%%%.....%......%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%%%.....%.......%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%%.....%........%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%.....%.........%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....#....+..........%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%..........%....-.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.........%.....%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%........%.....%%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.......%.....%%%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%......%.....%%%%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%.....%%%%%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%....+%....%%%%%%%....%%%%%%%%\e[0m"
"\e[1;34m %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \e[0m"
"\e[1;34m   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   \e[0m"
"\e[1;34m     %%%%%%%%%%%%%%%%%%%%%%%%%%%     \e[0m"
)
# ======================================================================



# ========== Info Lines =============================================
info_lines=(
"\e[95m$user@$host\e[0m"
"\e[96m---------------------------\e[0m"
"\e[93m\e[1mOS:\e[0m $distro"
"\e[93m\e[1mKernel:\e[0m $kernel"
"\e[93m\e[1mUptime:\e[0m $uptime"
"\e[93m\e[1mShell:\e[0m $shell"
"\e[93m\e[1mWM/Desktop:\e[0m $wm"
"\e[93m\e[1mVamoraSys version:\e[0m $VERSION"
"\e[93m\e[1mVamoraApps support:\e[0m $vapps_support"
"\e[96m---------------------------\e[0m"
"\e[93m\e[1mNetwork:\e[0m $network_status"
"\e[93m\e[1mPublic IP :\e[0m $ip"
"\e[93m\e[1mCPU:\e[0m $cpu_model"
"\e[93m\e[1mGPU:\e[0m $gpu"
"\e[93m\e[1mRAM:\e[0m $ram_total"
"\e[93m\e[1mDisk:\e[0m $disk_usage"
"\e[93m\e[1mBattery:\e[0m $battery"
"\e[93m\e[1mResolution:\e[0m $resolution"
"\e[93m\e[1mTerminal:\e[0m $terminal"
"\e[96m---------------------------\e[0m"
" \e[40m    \e[41m    \e[42m    \e[43m    \e[44m    \e[45m    \e[46m    \e[47m    \e[0m"
" \e[100m    \e[101m    \e[102m    \e[103m    \e[104m    \e[105m    \e[106m    \e[107m    \e[0m"
# " \e[31m‚ñ†‚ñ† \e[33m‚ñ†‚ñ† \e[32m‚ñ†‚ñ† \e[36m‚ñ†‚ñ† \e[34m‚ñ†‚ñ† \e[35m‚ñ†‚ñ† \e[37m‚ñ†‚ñ† \e[90m‚ñ†‚ñ† \e[0m"
)
# ======================================================================
# ========== Side by side Print =============
term_width=$(tput cols)
min_width=70  # adjust if needed

ascii_len=${#ascii_art[@]}
info_len=${#info_lines[@]}
max_lines=$(( ascii_len > info_len ? ascii_len : info_len ))

if (( term_width >= min_width )); then
    # üñ•Ô∏è Wide terminal: print side-by-side
    for (( i=0; i<max_lines; i++ )); do
        left="${ascii_art[$i]}"
        right="${info_lines[$i]}"
        printf "%-40b %b\n" "${left:-}" "${right:-}"
    done
else
    # üì± Small terminal: ASCII first, then info below
    for line in "${ascii_art[@]}"; do
        printf "%b\n" "$line"
    done
    echo
    for line in "${info_lines[@]}"; do
        printf "%b\n" "$line"
    done
fi
# ===========================================