#!/bin/bash

# --------------------------------------------------------------
# vaminfo/vamifetch - VamoraOS (or any cool distro) system fetch
# --------------------------------------------------------------

LC_ALL=C
LANG=C

# vamora logo ASCII art
ascii_art=(
"\e[1;34m     %%%%%%%%%%%%%%%%%%%%%%%%%%%     \e[0m"
"\e[1;34m   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   \e[0m"
"\e[1;34m %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \e[0m"
"\e[1;34m%%%%%%%%....*%%%%%%....%%....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%%%%%.....%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%%%%.....%......%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%%%.....%.......%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%%.....%........%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%.....%.........%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....#....+..........%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%..........%....-.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.........%.....%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%........%.....%%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.......%.....%%%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%......%.....%%%%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%.....%.....%%%%%.....%%%%%%%%\e[0m"
"\e[1;34m%%%%%%%%....+%....%%%%%%%....%%%%%%%%\e[0m"
"\e[1;34m %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% \e[0m"
"\e[1;34m   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   \e[0m"
"\e[1;34m     %%%%%%%%%%%%%%%%%%%%%%%%%%%     \e[0m"
)

user=$(whoami)
host=$(hostname)
kernel=$(uname -r)
uptime=$(uptime -p 2>/dev/null | sed 's/up //')
shell=${SHELL:-Unknown}
wm=${XDG_CURRENT_DESKTOP:-None}

# Get OS name
if [ -f /etc/os-release ]; then
  distro=$(grep "^PRETTY_NAME=" /etc/os-release | cut -d= -f2 | tr -d '"')
else
  distro="Unknown OS"
fi

# Hardware stuffz
cpu_model=$(lscpu 2>/dev/null | grep "Model name" | awk -F: '{print $2}' | xargs)
cpu_model=${cpu_model:-N/A}

gpu=$(lspci 2>/dev/null | grep -i 'vga\|3d' | cut -d ":" -f3 | xargs)
gpu=${gpu:-N/A}

# RAM total, no crash plz
ram_total=$(free -h 2>/dev/null | awk '/Mem:/ {print $2}')
ram_total=${ram_total:-N/A}

disk_usage=$(df -h / 2>/dev/null | awk 'NR==2 {print $3 " / " $2 " used"}')
disk_usage=${disk_usage:-N/A}

# Battery check, might not exist
battery=$(upower -i $(upower -e | grep 'BAT' 2>/dev/null) 2>/dev/null | grep percentage | awk '{print $2}')
battery=${battery:-N/A}

# Resolution, if u have a screen
resolution=$(xrandr --current 2>/dev/null | grep '*' | awk '{print $1}' | head -n1)
resolution=${resolution:-N/A}

# VamoraApps (vapps) support check
if [ -d /opt/VamoraApps/ ]; then
  vapps_support="Fully supported"
elif [ -d /VamoraSys/vapps ]; then
  vapps_support="Supported (Please update your Vapp installer)"
elif [ -d "$HOME/.vapps" ]; then
  vapps_support="Supported for some users"
else
  vapps_support="Not supported"
fi


# Network status
if ping -c 1 -W 2 1.1.1.1 >/dev/null 2>&1; then
  interface=$(ip link show | awk '/state UP/ {print $2}' | sed 's/://' | head -n1)
  if [ -n "$interface" ]; then
    network_status="Connected (interface: $interface)"
  else
    network_status="Connected (unknown interface)"
  fi
else
  network_status="Not connected"
fi

ip=$(curl -s ifconfig.me 2>/dev/null)
# Terminal detection (ts dosnt work well)
get_terminal() {
    pid=$$
    while [ $pid -ne 0 ]; do
        term=$(ps -o comm= -p $pid 2>/dev/null)
        case "$term" in
            gnome-terminal|gnome-terminal-*|gnome-terminal-server)
                echo "GNOME Terminal"
                return
                ;;
            konsole)
                echo "Konsole"
                return
                ;;
            xterm)
                echo "XTerm"
                return
                ;;
            alacritty)
                echo "Alacritty"
                return
                ;;
            mate-terminal)
                echo "MATE Terminal"
                return
                ;;
            tilix)
                echo "Tilix"
                return
                ;;
            kitty)
                echo "Kitty"
                return
                ;;
            urxvt|rxvt)
                echo "URxvt"
                return
                ;;
            st)
                echo "ST"
                return
                ;;
            lxterminal)
                echo "LXTerminal"
                return
                ;;
            xfce4-terminal)
                echo "XFCE Terminal"
                return
                ;;
            tmux|screen)
                # Skip multiplexers and keep looking
                ;;
            *)
                # Get parent PID for next iteration
                pid=$(ps -o ppid= -p $pid 2>/dev/null | xargs)
                [ -z "$pid" ] && break
                ;;
        esac
    done
    # do zis if no terminal found
    echo "VamoTerminal"
}
terminal=$(get_terminal)

# make stuff short so ur terminal wont eat them
max_len=42
if [ ${#cpu_model} -gt $max_len ]; then
  cpu_model="${cpu_model:0:$max_len}..."
fi

max_len=30
if [ ${#gpu} -gt $max_len ]; then
  gpu="${gpu:0:$max_len}..."
fi

# Remove what yu dont need here by adding # in the beigening
info_lines=(
"\e[95m$user@$host\e[0m"
"\e[96m---------------------------\e[0m"
"\e[93m\e[1mOS:\e[0m $distro"
"\e[93m\e[1mKernel:\e[0m $kernel"
"\e[93m\e[1mUptime:\e[0m $uptime"
"\e[93m\e[1mShell:\e[0m $shell"
"\e[93m\e[1mWM/Desktop:\e[0m $wm"
"\e[93m\e[1mVamora version:\e[0m Alpha 1"
"\e[93m\e[1mVamoraApps support:\e[0m $vapps_support"
"\e[96m---------------------------\e[0m"
"\e[93m\e[1mNetwork:\e[0m $network_status"
# "\e[93m\e[1mPublic IP :\e[0m $ip"
"\e[93m\e[1mCPU:\e[0m $cpu_model"
"\e[93m\e[1mGPU:\e[0m $gpu"
"\e[93m\e[1mRAM:\e[0m $ram_total"
"\e[93m\e[1mDisk:\e[0m $disk_usage"
"\e[93m\e[1mBattery:\e[0m $battery"
"\e[93m\e[1mResolution:\e[0m $resolution"
"\e[93m\e[1mTerminal:\e[0m $terminal"
"\e[96m---------------------------\e[0m"
)

# this make everything cool
for i in "${!ascii_art[@]}"; do
    left="${ascii_art[$i]}"
    right="${info_lines[$i]}"
    printf "%-40b %b\n" "$left" "$right"
done

# Color blocks aligned under text cuz why not
padding="                                        "
echo -e "${padding} \e[40m    \e[41m    \e[42m    \e[43m    \e[44m    \e[45m    \e[46m    \e[47m    \e[0m"
echo -e "${padding} \e[100m    \e[101m    \e[102m    \e[103m    \e[104m    \e[105m    \e[106m    \e[107m    \e[0m"
